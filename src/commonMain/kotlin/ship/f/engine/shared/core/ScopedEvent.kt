package ship.f.engine.shared.core

import kotlinx.serialization.Serializable

@Serializable
abstract class ScopedEvent {
    @Serializable
    data class InitialEvent(val name: String) : ScopedEvent() { //I may be making an error with this scope implementation as well... Actually, I might be okay
        override fun getScopes(): List<ScopeTo> = listOf(ScopeTo.SingleScopeTo(value = name))
    }

    @Serializable
    data class AuthEvent(
        val userId: String? = null,
        val deviceId: String? = null,
        val fcmToken: String? = null,
        val accessToken: String? = null,
        val refreshToken: String? = null
    ) : ScopedEvent() {
//        override fun getScopes(): List<ScopeTo> = listOf(
//            userId?.let { ScopeTo.SingleScopeTo(value = it) } ?: defaultScope TODO potentially causing double event sending because of the scoping
//        )
        override fun getScopes(): List<ScopeTo> = listOf(ScopeTo.SingleScopeTo(value = "AUTH"))
    }

    abstract fun getScopes(): List<ScopeTo> // will be generated by KSP
}

@Serializable
abstract class Event : ScopedEvent() {
    override fun getScopes(): List<ScopeTo> = emptyList()
}
